swagger: '2.0'
info:
  version: '0.1.0'
  title: Open Affect API
  description: API to record emotions
  termsOfService: none
  contact:
    name: Open Affect API team
    email: info@openaffect.io
    url: http://openaffect.io
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
host: 192.168.99.100:8080
basePath: /api
schemes:
- "https"
- "http"
paths:
  /user/{username}:
    get:
      description: allow a user to see his/her players
      operationId: listAdventurers
      consumes:
        - application/json
      parameters:
        - name: "username"
          in: "path"
          description: "ID of the user to return"
          required: true
          type: string
      responses:
        '200':
          description: list of players
          schema:
            type: array
            items:
              $ref: '#/definitions/player'
        '403':
          description: "You have not authorization to access this user data"
        '404':
          description: "User not found"
  /user/{username}/createPlayer:
    post:
      description: allow a user to create a player
      operationId: createPlayer
      consumes:
        - application/json
      parameters:
        - name: player
          in: body
          description: the new player
          required: true
          schema:
            $ref: '#/definitions/player'
        - name: "username"
          in: "path"
          description: "ID of the user to return"
          required: true
          type: string
      responses:
        '201':
          description: no body
          schema:
            type: object
        '403':
          description: "You have not authorization to access this user data"
  /user/{username}/createParty:
    post:
      description: allow a user to create a party
      operationId: createParty
      consumes:
        - application/json
      parameters:
        - name: party
          in: body
          description: the new party
          required: true
          schema:
            $ref: '#/definitions/party'
        - name: "username"
          in: "path"
          description: "ID of the user to return"
          required: true
          type: string
      responses:
        '201':
          description: no body
          schema:
            type: object
        '403':
          description: "You have not authorization to access this user data"
  /player:
    get:
      description: allow a user to see all players
      operationId: getAllPlayers
      consumes:
        - application/json
      responses:
        '200':
          description: Player
          schema:
            type: array
            items:
              $ref: '#/definitions/player'
  /player/{id}:
    get:
      description: allow a user to see one player
      operationId: getPlayer
      consumes:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the player to return"
          required: true
          type: string
      responses:
        '200':
          description: Player
          schema:
            type: object
            items:
              $ref: '#/definitions/player'
        '404':
          description: "Player not found"
  /player/{id}/joinParty:
    post:
      description: allow the player's owner to add his player to a party
      operationId: joinParty
      consumes:
        - application/json
      parameters:
        - name: party
          in: body
          description: the party
          required: true
          schema:
            $ref: '#/definitions/party'
        - name: "id"
          in: "path"
          description: "ID of the player to return"
          required: true
          type: string
      responses:
        '200':
          description: Player
          schema:
            type: object
            items:
              $ref: '#/definitions/player'
        '403':
          description: "No right access"
        '404':
          description: "Player not found"
  /player/{id}/quitParty:
    post:
      description: allow the player's owner to make his player quit a party
      operationId: quitParty
      consumes:
        - application/json
      parameters:
        - name: party
          in: body
          description: the party
          required: true
          schema:
            $ref: '#/definitions/party'
        - name: "id"
          in: "path"
          description: "ID of the player to return"
          required: true
          type: string
      responses:
        '200':
          description: Player
          schema:
            type: object
            items:
              $ref: '#/definitions/player'
        '403':
          description: "No right access"
        '404':
          description: "Player not found"
  /party:
    get:
      description: allow a user to see all parties
      operationId: getAllParties
      consumes:
        - application/json
      responses:
        '200':
          description: Party
          schema:
            type: array
            items:
              $ref: '#/definitions/party'
  /party/{id}:
    get:
      description: allow a user to see one party
      operationId: getParty
      consumes:
        - application/json
      parameters:
        - name: "id"
          in: "path"
          description: "ID of the player to return"
          required: true
          type: string
      responses:
        '200':
          description: Party
          schema:
            type: object
            items:
              $ref: '#/definitions/party'
        '404':
          description: "Party not found"
      
definitions:
  user:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
      password:
        type: string
  player:
    type: object
    required:
      - id
      - strength
      - dexterity
      - constitution
      - intelligence
      - wisdom
      - charisma
      - experience
      - spendpoints
      - fkRace    
      - fkClasse
      - fkUzer
    properties:
      id:
        type: string
      strength:
        type: integer
      dexterity:
        type: integer
      constitution:
        type: integer
      intelligence:
        type: integer
      wisdom:
        type: integer
      charisma:
        type: integer
      experience:
        type: integer
      spendpoints:
        type: integer
      fkRace:
        type: string
      fkClasse:
        type: string
      fkUzer:
        type: string
  party:
    type: object
    required:
      - id
      - reputation
    properties:
      id:
        type: string
      reputation:
        type: integer